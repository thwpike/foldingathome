#!/bin/sh

# Check the current directory for an installation, if not present then
# create an installation
VERSION=20140130
BUILDER="Thomas Pike"
install() {
  if [ -e kernel -a -e initrd -a -e ldlinux.sys -a -e syslinux.cfg -a -e version.txt -a -e fold.txt ]
  then
    if [ `cat version.txt` -ge $VERSION ]
    then
      return 1
    else
      echo "Out of date installation found, updating it"
    fi
  fi
  cp /etc/folding/cgi-bin/kernel .
  cp /etc/folding/cgi-bin/fold.txt .
  cat << EOF > syslinux.cfg
DEFAULT fold
DEFAULT64 fold
TIMEOUT 150
PROMPT 1
DISPLAY fold.txt

LABEL fold
        KERNEL kernel
        APPEND initrd=initrd USER=$USER TEAM=$TEAM PASSKEY=$PASSKEY BIG=$BIG MEM=$MEM ADVMETHODS=$ADVMETHODS SMPCPUS=$SMPCPUS BACKUP=$BACKUP REBOOT=$REBOOT POWEROFF=$POWEROFF INSTALL=$INSTALL BENCHMARK=no PROXY_HOST=$PROXY_HOST PROXY_PORT=$PROXY_PORT PROXY_USER=$PROXY_USER PROXY_PASS=$PROXY_PASS INTF=$INTF IP=$IP MASK=$MASK GATEWAY=$GATEWAY DNS=$DNS TFTP=$TFTP SHELL=$SHELL ONEUNIT=$ONEUNIT

LABEL benchmark
        KERNEL kernel
        APPEND initrd=initrd USER=$USER TEAM=$TEAM PASSKEY=$PASSKEY BIG=$BIG MEM=$MEM ADVMETHODS=$ADVMETHODS SMPCPUS=$SMPCPUS BACKUP=$BACKUP REBOOT=$REBOOT POWEROFF=$POWEROFF INSTALL=$INSTALL BENCHMARK=yes PROXY_HOST=$PROXY_HOST PROXY_PORT=$PROXY_PORT PROXY_USER=$PROXY_USER PROXY_PASS=$PROXY_PASS INTF=$INTF IP=$IP MASK=$MASK GATEWAY=$GATEWAY DNS=$DNS TFTP=$TFTP SHELL=$SHELL ONEUNIT=$ONEUNIT

EOF
  savedir=`pwd`
  cd /
  cpio -o -H newc < /etc/manifest | gzip -9 > $savedir/initrd
  cd $savedir
  echo $VERSION > version.txt
  return 0
}

mkdir -p /dev
mkdir -p /proc
mkdir -p /sys

mount -t tmpfs -o size=64k,mode=0755 tmpfs /dev
mkdir -p /dev/pts
mount -t devpts devpts /dev/pts

mount -n -t proc proc /proc
mount -n -t sysfs sysfs /sys

echo > /dev/mdev.seq
echo /bin/mdev > /proc/sys/kernel/hotplug
/bin/mdev -s

mkdir -p /var/lib/hwclock

stty -echo
ifconfig lo 127.0.0.1
ulimit -c unlimited

if [ -z "$IP" ]
then
  if [ -z "$INTF" ]
  then
    # Make sure we try all interfaces for DHCP
    for iface in `awk '/eth/ {sub(":", "" ) ; print $1}' /proc/net/dev`
    do
      name=fold-`ifconfig $iface | awk -F : '/HWaddr/ {print $6$7}'`
      udhcpc -s /etc/dhcp.script -i $iface -x hostname:$name -b
    done
  else
      name=fold-`ifconfig $INTF | awk -F : '/HWaddr/ {print $6$7}'`
      udhcpc -s /etc/dhcp.script -i $INTF -x hostname:$name
  fi
  if [ "`hostname`" = "(none)" ]
  then
    echo "No hostname from DHCP, setting hostname to $name"
    hostname $name
  fi
else
  # Static config
  echo
  echo
  echo "Static config IP:$IP"
  echo "            Mask:$MASK"
  echo "         Gateway:$GATEWAY"
  echo "      DNS Server:$DNS"
  echo "     TFTP Server:$TFTP"
  if [ -z "$INTF" ]
  then
    interface=eth0
  else
    interface=$INTF
  fi
  echo "       Interface:$interface"

  ifconfig $interface $IP netmask $MASK

  route add default gw $GATEWAY
  echo "nameserver $DNS" > /etc/resolv.conf
  name=fold-`ifconfig $interface | awk -F : '/HWaddr/ {print $6$7}'`
  hostname $name
  echo $IP > /tmp/myip
  echo $TFTP > /tmp/tftpserverip
fi
echo "127.0.0.1 `hostname`" > /etc/hosts

mkdir -p /etc/folding/cgi-bin
cd /etc/folding
cat /proc/cpuinfo > cpuinfo.txt
dmesg > dmesg.txt
httpd

numprocs=`grep -c "^processor" /proc/cpuinfo`
PROCESSORS=$numprocs
arch=`uname -m`
if [ -z "$USER" ]
then
  USER=CrossroadsIT
fi
if [ -z "$TEAM" ]
then
  TEAM=0
fi
if [ -z "$BIG" ]
then
  BIG=normal
fi
if [ -z "$ADVMETHODS" ]
then
  ADVMETHODS=no
fi
if [ -z "$BACKUP" ]
then
  BACKUP=15
fi
if [ $BACKUP -lt 3 ] || [ $BACKUP -gt 30 ]
then
  CHECKPOINT=15
else
  CHECKPOINT=$BACKUP
fi
if [ -z "$REBOOT" -o "$REBOOT" != "enabled" ]
then
  REBOOT=disabled
fi
if [ -z "$POWEROFF" -o "$POWEROFF" != "enabled" ]
then
  POWEROFF=disabled
fi
if [ -z "$INSTALL" -o "$INSTALL" != "yes" ]
then
  INSTALL=no
fi
if [ -z "$SMPCPUS" -o x"$SMPCPUS" = x"0" ]
then
  SMPCPUS=$numprocs
fi
if [ -z "$BLANK" ]
then
  BLANK=0
fi
if [ $BLANK -lt 0 ] || [ $BLANK -gt 60 ]
then
  BLANK=0
fi
if [ -z "$GROUP" ]
then
  GROUP=DISKLESS
fi
if [ -z "$SHELL" -o "$SHELL" != "yes" ]
then
  SHELL=no
fi
if [ -z "$ONEUNIT" -o "$ONEUNIT" != "yes" ]
then
  ONEUNIT=no
else
  FAH_FLAGS="$FAH_FLAGS -oneunit"
fi

# Check for VMs
isVMWare
noVMWare=$?
isVPC
noVPC=$?
grep -q "QEMU Virtual CPU" /proc/cpuinfo
noQEMU=$?

# Set screen blank interval
echo -e "\033[9;$BLANK]"

# Check for USB drives
echo -e "\n\n\nWaiting 10 seconds for any USB drives to start"
sleep 10
mount -n -t vfat /dev/sda1 /usba > /dev/null 2>&1
noUSBa=$?
if [ $noUSBa -eq 0 ]
then
  echo "USB drive A found"
  umount /usba
fi
mount -n -t vfat /dev/sdb1 /usbb > /dev/null 2>&1
noUSBb=$?
if [ $noUSBb -eq 0 ]
then
  echo "USB drive B found"
  umount /usbb
fi

# Do installation
if [ "$INSTALL" = "yes" ]
then
  if [ $noUSBa -eq 0 ]
  then
    echo "Attempting install to USB drive A"
    mount -n -t vfat /dev/sda1 /usba
    cd /usba
    install
    did_install=$?
    cd /etc/folding
    umount /usba
    if [ $did_install -eq 1 ]
    then
      echo "USB drive A has already been installed, ignoring INSTALL flag"
    else
      cat /bin/mbr.bin > /dev/sda
      syslinux /dev/sda1
      echo "Installation to drive A completed"
    fi
  fi
  if [ $noUSBb -eq 0 ]
  then
    echo "Attempting install to USB drive B"
    mount -n -t vfat /dev/sdb1 /usbb
    cd /usbb
    install
    did_install=$?
    cd /etc/folding
    umount /usbb
    if [ $did_install -eq 1 ]
    then
      echo "USB drive B has already been installed, ignoring INSTALL flag"
    else
      cat /bin/mbr.bin > /dev/sdb
      syslinux /dev/sdb1
      echo "Installation to drive B completed"
    fi
  fi
fi

# If doing benchmark, go do that and go no further, it never comes back.
if [ "$BENCHMARK" = "yes" ]
then
  benchmark.sh
fi

# Download the client from Stanford
# Sort out http_proxy environment variable for wget
if [ -n "$PROXY_HOST" ]
then
  if [ -z "$PROXY_PORT" ]
  then
    PROXY_PORT=8080
  fi
  if [ -z "$PROXY_USER" ]
  then
    export http_proxy=http://$PROXY_HOST:$PROXY_PORT
    echo "Proxy is $http_proxy"
  else
    export http_proxy=http://$PROXY_USER:$PROXY_PASS@$PROXY_HOST:$PROXY_PORT
    echo "Proxy is $http_proxy"
  fi
fi

DOWNLOAD=FAH6.34-Linux64.tgz
wget http://www.stanford.edu/group/pandegroup/folding/release/$DOWNLOAD
if [ $? -eq 1 ]
then
  echo -e "\n\n\nFailed to download the client from Stanford's website:"
  echo "http://www.stanford.edu/group/pandegroup/folding/release/$DOWNLOAD"
  echo ""
  echo "Please double check your Gateway and DNS information"
  echo "Gateway: " `route -n | awk '/^0.0.0.0/ {print $2}'`
  echo "DNS servers: " `awk '{print $2}' /etc/resolv.conf`
  while  [ 1 ]
  do
    sleep 86400
  done
fi
tar xzf $DOWNLOAD

# Create a CD generator link
cat << EOF > cd.html
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Diskless Folding Parameters</title>
</head>
<body>
<Form action="cgi-bin/fold.iso" method="post">
  <P>
    <Label for="USER">Username: </Label>
    <Input type="text" name="USER" value="$USER"><BR>
    <Label for="TEAM">Team: </Label>
    <Input type="text" name="TEAM" value="$TEAM"><BR>
    <Label for="PASSKEY">Passkey: </Label>
    <Input type="text" name="PASSKEY" value="$PASSKEY"><BR>
    <Label for="BACKUP">Backup interval (in minutes, 0 to disable) </Label>
    <Input type="text" name="BACKUP" value="$BACKUP"><BR>
    Big Work Units:<BR>
EOF
    if [ "$BIG" = "normal" ]
    then
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"big\"> Big (>10MB)<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"normal\" checked=\"true\"> Normal (5-10MB)<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"small\"> Small (<5MB)<BR>" >> cd.html
    elif [ "$BIG" = "big" ]
    then
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"big\" checked=\"true\"> Big (>10MB)<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"normal\"> Normal (5-10MB)<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"small\"> Small (<5MB)<BR>" >> cd.html
    else
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"big\"> Big (>10MB)<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"normal\"> Normal (5-10MB)<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"BIG\" value=\"small\" checked=\"true\"> Small (<5MB)<BR>" >> cd.html
    fi
    echo "    Advmethods requesting new advanced cores and/or work units if available:<BR>" >> cd.html
    if [ "$ADVMETHODS" = "yes" ]
    then
      echo "    <Input type=\"radio\" name=\"ADVMETHODS\" value=\"yes\" checked=\"true\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"ADVMETHODS\" value=\"no\"> Disabled<BR>" >> cd.html
    else
      echo "    <Input type=\"radio\" name=\"ADVMETHODS\" value=\"yes\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"ADVMETHODS\" value=\"no\" checked=\"true\"> Disabled<BR>" >> cd.html
    fi
    echo "    <Label for=\"MEM\">Memory, in MB, to indicate (leave blank for auto-detect): </Label>" >> cd.html
    echo "    <Input type=\"text\" name=\"MEM\" value=\"$MEM\"><BR>" >> cd.html
    echo "    SMP instance per:<BR>" >> cd.html
    if [ "$SMPCPUS" = "8" ]
    then
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"8\" checked=\"true\"> 8 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"4\"> 4 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"2\"> 2 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"0\"> Automatic<BR>" >> cd.html
    elif [ "$SMPCPUS" = "4" ]
    then
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"8\"> 8 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"4\" checked=\"true\"> 4 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"2\"> 2 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"0\"> Automatic<BR>" >> cd.html
    elif [ "$SMPCPUS" = "2" ]
    then
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"8\"> 8 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"4\"> 4 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"2\" checked=\"true\"> 2 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"0\"> Automatic<BR>" >> cd.html
    else
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"8\"> 8 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"4\"> 4 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"2\"> 2 CPUs<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SMPCPUS\" value=\"0\" checked=\"true\"> Automatic<BR>" >> cd.html
    fi
    echo "    Remote Reboot:<BR>" >> cd.html
    if [ "$REBOOT" = "enabled" ]
    then
      echo "    <Input type=\"radio\" name=\"REBOOT\" value=\"enabled\" checked=\"true\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"REBOOT\" value=\"disabled\"> Disabled<BR>" >> cd.html
    else
      echo "    <Input type=\"radio\" name=\"REBOOT\" value=\"enabled\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"REBOOT\" value=\"disabled\" checked=\"true\"> Disabled<BR>" >> cd.html
    fi
    echo "    Remote Poweroff:<BR>" >> cd.html
    if [ "$POWEROFF" = "enabled" ]
    then
      echo "    <Input type=\"radio\" name=\"POWEROFF\" value=\"enabled\" checked=\"true\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"POWEROFF\" value=\"disabled\"> Disabled<BR>" >> cd.html
    else
      echo "    <Input type=\"radio\" name=\"POWEROFF\" value=\"enabled\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"POWEROFF\" value=\"disabled\" checked=\"true\"> Disabled<BR>" >> cd.html
    fi
    echo "    Install to USB drives on boot:<BR>" >> cd.html
    if [ "$INSTALL" = "yes" ]
    then
      echo "    <Input type=\"radio\" name=\"INSTALL\" value=\"yes\" checked=\"true\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"INSTALL\" value=\"no\"> Disabled<BR>" >> cd.html
    else
      echo "    <Input type=\"radio\" name=\"INSTALL\" value=\"yes\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"INSTALL\" value=\"no\" checked=\"true\"> Disabled<BR>" >> cd.html
    fi
    echo "    <Label for=\"BLANK\">Console blank time (1-60 minutes, 0=disabled): </Label>" >> cd.html
    echo "    <Input type=\"text\" name=\"BLANK\" value=\"$BLANK\"><BR>" >> cd.html
    cat << EOF >> cd.html
    <Label for="PROXY_HOST">Proxy Hostname (blank if no proxy): </Label>
    <Input type="text" name="PROXY_HOST" value="$PROXY_HOST"><BR>
    <Label for="PROXY_PORT">Proxy Port (blank if no proxy): </Label>
    <Input type="text" name="PROXY_PORT" value="$PROXY_PORT"><BR>
    <Label for="PROXY_USER">Proxy Username (blank if no proxy or proxy doesn't require username and password): </Label>
    <Input type="text" name="PROXY_USER" value="$PROXY_USER"><BR>
    <Label for="PROXY_PASS">Proxy Password (blank if no proxy or proxy doesn't require username and password): </Label>
    <Input type="text" name="PROXY_PASS" value="$PROXY_PASS"><BR>
    <Label for="INTF">Interface(blank for DHCP round-robin):  </Label>
    <Input type="text" name="INTF" value="$INTF"><BR>
    <Label for="IP">Static IP (blank for DHCP):  </Label>
    <Input type="text" name="IP" value="$IP"><BR>
    <Label for="MASK">Subnet Mask (blank for DHCP):  </Label>
    <Input type="text" name="MASK" value="$MASK"><BR>
    <Label for="GATEWAY">Default Gateway (blank for DHCP):  </Label>
    <Input type="text" name="GATEWAY" value="$GATEWAY"><BR>
    <Label for="DNS">DNS Server IP (blank for DHCP):  </Label>
    <Input type="text" name="DNS" value="$DNS"><BR>
    <Label for="TFTP">TFTP Server IP (blank for DHCP):  </Label>
    <Input type="text" name="TFTP" value="$TFTP"><BR>
    Login shell:<BR>
EOF
    if [ "$SHELL" = "yes" ]
    then
      echo "    <Input type=\"radio\" name=\"SHELL\" value=\"yes\" checked=\"true\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SHELL\" value=\"no\"> Disabled<BR>" >> cd.html
    else
      echo "    <Input type=\"radio\" name=\"SHELL\" value=\"yes\"> Enabled<BR>" >> cd.html
      echo "    <Input type=\"radio\" name=\"SHELL\" value=\"no\" checked=\"true\"> Disabled<BR>" >> cd.html
    fi
    cat << EOF >> cd.html
    <Input type="submit" value="Download ISO"> <Input type="reset">
  </P>
</Form>
</body>
</html>
EOF

# Copy the cd.html to reconfigure.html with changes
sed -e "s|cgi-bin/fold.iso|cgi-bin/reconf.cgi|" -e "s|Download ISO|Reconfigure|" < cd.html > reconfigure.html

# Dump useful info to the screen and web page
echo -e "\n\n\nDiskless Folding version $VERSION built by $BUILDER"
echo "Processor type: $arch"
echo "Found $numprocs processors"
echo "User: $USER"
echo "Team: $TEAM"
echo "Passkey: $PASSKEY"
echo "Big Packets: $BIG"
echo "Advmethods: $ADVMETHODS"
echo "Memory: $MEM MB"
echo "Backup every $BACKUP minutes"
echo "Core checkpoint every $CHECKPOINT minutes"
echo "Remote reboot: $REBOOT"
echo "Remote poweroff: $POWEROFF"
echo "Install: $INSTALL"
if [ $BLANK -eq 0 ]
then
  echo "Console blank: disabled"
else
  echo "Console blank: $BLANK minutes"
fi
echo "Hostname: " `hostname`
echo "IP address:" `cat /tmp/myip`

cat << EOF > index.backup
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
<TITLE>Diskless Folder</TITLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<P ALIGN=CENTER><FONT SIZE=7 STYLE="font-size: 32pt">Diskless Folder</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Diskless Folding version $VERSION built by $BUILDER</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Processor type: $arch</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Found $numprocs processors</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>User: $USER</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Team: $TEAM</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Passkey: $PASSKEY</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Big Packets: $BIG</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Advmethods: $ADVMETHODS</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Memory: $MEM MB</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Backup every $BACKUP minutes</FONT></P>
<P ALIGN=LEFT><FONT SIZE=3>Core checkpoint every $CHECKPOINT minutes</FONT></P>
EOF

echo "<P ALIGN=LEFT><FONT SIZE=3>Restart running with <a href=\"cgi-bin/oneunit.cgi\">oneunit</a> flag</FONT></P>" >> index.backup
# Do remote reboot setup
if [ "$REBOOT" = "enabled" ]
then
  echo "<P ALIGN=LEFT><FONT SIZE=3>Remote reboot: <a href=\"reboot.html\">enabled</a></FONT></P>" >> index.backup
  cat << EOF > reboot.html
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
<TITLE>Reboot</TITLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<P ALIGN=LEFT><FONT SIZE=3>Click <a href="cgi-bin/reboot.cgi">here</a> to reboot this diskless folder</FONT></P> 
</BODY></HTML>
EOF
  cat << EOF > /bin/do_reboot.sh
#!/bin/sh
sleep 1
reboot -f
EOF
  chmod 755 /bin/do_reboot.sh
  cat << EOF > cgi-bin/reboot.cgi
#!/bin/sh
echo "Content-type: text/html"
echo ""
echo "<html><head><META HTTP-EQUIV=\"Refresh\" CONTENT=\"90;URL=/\">"
echo "<SCRIPT LANGUAGE=\"JavaScript\"><!--"
echo "function redirect () { setTimeout(\"go_now()\",90000); }"
echo "function go_now ()   { window.location.href = \"/\"; }"
echo "//--></SCRIPT></head>"
echo "<body onLoad \"redirect()\">"
echo "Remote reboot command sent."
echo "<BR>This page will refresh back to the main page for this diskless folder in 90 seconds."
echo "<BR>If this does not work, click <a href="/">here</a>."
echo "</body></html>"
echo ""
/bin/do_reboot.sh > /dev/null 2>&1 &
EOF
  chmod 755 cgi-bin/reboot.cgi
else
  echo "<P ALIGN=LEFT><FONT SIZE=3>Remote reboot: disabled</FONT></P>" >> index.backup
fi
# Do remote poweroff setup
if [ "$POWEROFF" = "enabled" ]
then
  echo "<P ALIGN=LEFT><FONT SIZE=3>Remote poweroff: <a href=\"poweroff.html\">enabled</a></FONT></P>" >> index.backup
  cat << EOF > poweroff.html
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
<TITLE>Poweroff</TITLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<P ALIGN=LEFT><FONT SIZE=3>Click <a href="cgi-bin/poweroff.cgi">here</a> to poweroff this diskless folder</FONT></P> 
</BODY></HTML>
EOF
  cat << EOF > /bin/do_poweroff.sh
#!/bin/sh
sleep 1
poweroff -f
EOF
  chmod 755 /bin/do_poweroff.sh

cat << EOF > cgi-bin/poweroff.cgi
#!/bin/sh
echo "Content-type: text/html"
echo ""
echo "<html><body>Remote poweroff command sent.</body></html>"
echo ""
/bin/do_poweroff.sh > /dev/null 2>&1 &
EOF
  chmod 755 cgi-bin/poweroff.cgi
else
  echo "<P ALIGN=LEFT><FONT SIZE=3>Remote poweroff: disabled</FONT></P>" >> index.backup
fi

echo "<P ALIGN=LEFT><FONT SIZE=3>Install: $INSTALL</FONT></P>" >> index.backup
if [ $BLANK -eq 0 ]
then
  echo "<P ALIGN=LEFT><FONT SIZE=3>Console blank: disabled</FONT></P>" >> index.backup
else
  echo "<P ALIGN=LEFT><FONT SIZE=3>Console blank: $BLANK minutes</FONT></P>" >> index.backup
fi
echo "<P ALIGN=LEFT><FONT SIZE=3>Hostname: " `hostname` "</FONT></P>" >> index.backup
echo "<P ALIGN=LEFT><FONT SIZE=3>IP address:" `cat /tmp/myip` "</FONT></P>" >> index.backup

# Check if this is running on the bare metal or a VM and do NTP if necessary
if [ $noVMWare -eq 0 ]
then
  echo "Running under VMWare, not using NTP to sync time"
  echo "<P ALIGN=LEFT><FONT SIZE=3>Running under VMWare, not using NTP to sync time</FONT></P>" >> index.backup
elif [ $noVPC -eq 0 ]
then
  echo "Running under VirtualPC, not using NTP to sync time"
  echo "<P ALIGN=LEFT><FONT SIZE=3>Running under VirtualPC, not using NTP to sync time</FONT></P>" >> index.backup
elif [ $noQEMU -eq 0 ]
then
  echo "Running under QEMU or KVM, not using NTP to sync time"
  echo "<P ALIGN=LEFT><FONT SIZE=3>Running under QEMU or KVM, not using NTP to sync time</FONT></P>" >> index.backup
else
  echo "VMWare, VirtualPC, QEMU and KVM not detected, using NTP to sync time"
  echo "<P ALIGN=LEFT><FONT SIZE=3>VMWare and VirtualPC not detected, using NTP to sync time</FONT></P>" >> index.backup
  /bin/ntpd -p 0.pool.ntp.org -p 1.pool.ntp.org -p 2.pool.ntp.org -p 3.pool.ntp.org
fi

# Determine if SMP or normal and correct "processor" count for SMP
if [ "$arch" = "x86_64" -a $numprocs -gt 1 ]
then
  smp=1
  carry=`expr $numprocs % $SMPCPUS`
  if [ $carry -gt 0 ]
  then
    numprocs=`expr $numprocs / $SMPCPUS + 1`
    instances=$numprocs
  else
    numprocs=`expr $numprocs / $SMPCPUS`
    instances=$numprocs
  fi
  echo "" > /etc/folding/hanglog.txt
  echo "<P ALIGN=LEFT><FONT SIZE=3>Hang check <A HREF=\"hanglog.txt\">logfile</A></FONT></P>" >> index.backup
  echo "<P ALIGN=LEFT><FONT SIZE=3>SMP instance per $SMPCPUS CPUs</FONT></P>" >> index.backup
  echo "SMP instance per $SMPCPUS CPUs"
  FAH_FLAGS="$FAH_FLAGS -smp $SMPCPUS"
else
  smp=0
fi

# Links to CD and reconfigure
echo
echo "<P ALIGN=LEFT><FONT SIZE=3>Folding CD <A HREF="cd.html">Generator</A></FONT></P>" >> index.backup
echo -n "<P ALIGN=LEFT><FONT SIZE=3><A HREF=\"reconfigure.html\">Reconfigure</A> " >> index.backup
if [ $noVMWare -eq 0 -o $noQEMU -eq 0 -o $noVPC -eq 0 ] 
then
  if [ "`cat /proc/sys/kernel/bootloader_type`" = "49" ]
  then 
    echo -n "this host and " >> index.backup
  fi
fi
echo "any USB drives.</FONT></P>" >> index.backup

echo "<P ALIGN=LEFT><FONT SIZE=3>Processor <A HREF=\"cgi-bin/sensors.cgi\">temperatures</A> (Intel Core and AMD K8)</FONT></P>" >> index.backup

# VM and USB updater link
#if [ "`cat /proc/sys/kernel/bootloader_type`" = "49" ]
#then
#  echo "<P ALIGN=LEFT><FONT SIZE=3><A HREF="update.cgi">Check</A> for updates</FONT></P>" >> index.backup
#fi

# Setup webpage for each instance
instance=1
while [ "$instance" -le "$numprocs" ]
do
  cat << EOF >> index.backup
<P ALIGN=LEFT><FONT SIZE=3><B>Instance <A HREF="$instance/">$instance</A></B></FONT></P>
<P ALIGN=LEFT><FONT SIZE=3><A HREF="$instance/FAHlog.txt">Folding
Log File</A></FONT></P>
<P ALIGN=LEFT><FONT SIZE=3><A HREF="$instance/unitinfo.txt">Unit
Info</A></FONT></P>
<P ALIGN=LEFT><FONT SIZE=3><A HREF="$instance/backup.tar">Backup of WU</A></FONT></P>
EOF
  if [ $smp -eq 1 ]
  then
    echo "<P ALIGN=LEFT><FONT SIZE=3><A HREF="cgi-bin/kill_cores.cgi?$instance">Kill</A> folding cores</FONT></P>" >> index.backup
  fi
  instance=`expr $instance + 1`
done
echo "</BODY></HTML>" >> index.backup
grep -v backup index.backup > index.html

# Setup the instances
while [ "$numprocs" -gt "0" ]
do
  echo "Setting up instance $numprocs"
  mkdir -p $numprocs
  cd $numprocs
  cat << EOF > client.cfg
[settings]
username=$USER
team=$TEAM
passkey=$PASSKEY
asknet=no
bigpackets=$BIG
machineid=$numprocs

[http]
EOF

  if [ -z "$PROXY_HOST" ]
  then
    echo "active=no" >> client.cfg
    echo "host=localhost" >> client.cfg
    echo "port=8080" >> client.cfg
  else
    echo "active=yes" >> client.cfg
    echo "host=$PROXY_HOST" >> client.cfg
    echo "port=$PROXY_PORT" >> client.cfg
    if [ -z "$PROXY_USER" ]
    then
      echo "usepasswd=no" >> client.cfg
    else
      echo "usepasswd=yes" >> client.cfg
      echo "proxy_name=$PROXY_USER"  >> client.cfg
      echo "proxy_passwd=$PROXY_PASS" >> client.cfg
    fi
  fi
  cat << EOF >> client.cfg

[core]
checkpoint=$CHECKPOINT

[clienttype]
EOF
  if [ -n "$MEM" ]
  then
    echo "memory=$MEM" >> client.cfg
  fi
  if [ "$ADVMETHODS" = "yes" ]
  then
    echo "type=3" >> client.cfg
  else
    echo "type=0" >> client.cfg
  fi

# Do the Caesar Cipher on the proxy password (+0x64 and terminate with 0xae)
  if [ -n "$PROXY_PASS" ]
  then
    encode < client.cfg > client.tmp
    mv client.tmp client.cfg
  fi

# Restore from tftp backup if present
  if [ "`cat /tmp/tftpserverip`" != "" ]
  then
    tftp -g `cat /tmp/tftpserverip` -l latest.`cat /tmp/myip`.$numprocs -r latest.`cat /tmp/myip`.$numprocs > /dev/null 2>&1
    if [ "`cat latest.* 2>/dev/null`" != "" ]
    then
      echo "Restoring from TFTP"
      tftp -g `cat /tmp/tftpserverip` -l backup.`cat /tmp/myip`.`cat latest.*`.$numprocs -r backup.`cat /tmp/myip`.`cat latest.*`.$numprocs
      tar xvf backup.`cat /tmp/myip`.`cat latest.*`.$numprocs
      rm backup.`cat /tmp/myip`.`cat latest.*`.$numprocs
      echo "Restore done"
    fi
  fi

# Restore from USB drive A if present
  mount -n -t vfat /dev/sda1 /usba > /dev/null 2>&1
  if [ $? -eq 0 ]
  then
    if [ -d /usba/folding/$numprocs ]
    then
      echo "Restoring from USB drive A"
      cp -r /usba/folding/$numprocs/* .
      echo "Restore done"
    fi
    umount /usba
 fi

# Restore from USB drive B if present
  mount -n -t vfat /dev/sdb1 /usbb > /dev/null 2>&1
  if [ $? -eq 0 ]
  then
    if [ -d /usbb/folding/$numprocs ]
    then
      echo "Restoring from USB drive B"
      cp -r /usbb/folding/$numprocs/* .
      echo "Restore done"
    fi
    umount /usbb
  fi

# Restore from hard drive image if VM and booted from syslinux
  if [ $noVMWare -eq 0 -o $noQEMU -eq 0 -o $noVPC -eq 0 ] 
  then
    if [ "`cat /proc/sys/kernel/bootloader_type`" = "49" ]
    then
      mount -n -t vfat /dev/hda1 /hda
      if [ $? -eq 0 ]
      then
        if [ -d /hda/folding/$numprocs ]
        then
          echo "Restoring from disk image"
          cp -r /hda/folding/$numprocs/* .
          echo "Restore done"
        fi
        umount /hda
      else
        echo "Disk image is corrupt, not restoring"
      fi
    fi
  fi

# Start up the client
  if [ -f /etc/folding/fah6 ];
  then
    ln -s /etc/folding/fah6 .;
    chmod 0755 /etc/folding/fah6;
  fi
  if [ -f /etc/folding/mpiexec ];
  then
    ln -s /etc/folding/mpiexec .;
    chmod 0755 /etc/folding/mpiexec;
  fi

  ./fah6 -local -forceasm $FAH_FLAGS > /dev/null 2>&1 &

  numprocs=`expr $numprocs - 1`
  cd /etc/folding
done

# Startup the backup process
if [ $BACKUP -gt 0 ]
then
  backup.sh $BACKUP &
fi

# Startup the hang checker
if [ $smp -eq 1 ]
then
  check_hang.sh &
fi

# Loop so we don't exit init
while [ 1 ]
do
  if [ $SHELL = "yes" ]
  then
    getty 38400 tty1
  else
    reset
    echo "Diskless Folding version $VERSION built by $BUILDER"
    echo "Processor type: $arch"
    echo "Found $PROCESSORS processors"
    echo "User: $USER"
    echo "Team: $TEAM"
    echo "Passkey: $PASSKEY"
    echo "Big Packets: $BIG"
    echo "Advmethods: $ADVMETHODS"
    echo "Memory: $MEM MB"
    echo "Backup every $BACKUP minutes"
    echo "Core checkpoint every $CHECKPOINT minutes"
    echo "Remote reboot: $REBOOT"
    echo "Install: $INSTALL"
    if [ $BLANK -eq 0 ]
    then
      echo "Console blank: disabled"
    else
      echo "Console blank: $BLANK minutes"
    fi
    echo "Hostname: " `hostname`
    echo "IP address:" `cat /tmp/myip`
    echo "Time: " `date`
    echo "Load: " `uptime | cut -d' ' -f11-13`
    for UNIT in `seq 1 $instances`
    do
      if [ -f /etc/folding/$UNIT/unitinfo.txt ];
      then
        PROGRESS=`cat /etc/folding/$UNIT/unitinfo.txt | grep 'Progress' | sed -e 's,\s*Progress:\s*\([0-9]\+\)\%.*,\1%,'`;
      else
        PROGRESS="Not Started";
    fi
    echo "Unit $UNIT Progress: " $PROGRESS;
    done
    sleep 20;
  fi
done
